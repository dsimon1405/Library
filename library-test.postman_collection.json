{
	"info": {
		"_postman_id": "51117179-5a93-4fa6-8c3d-5c4b1d8fbaca",
		"name": "library-test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18404932"
	},
	"item": [
		{
			"name": "auth-service",
			"item": [
				{
					"name": "INIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"userName\", \"user\");\r",
									"pm.environment.set(\"userPass\", \"pass\");\r",
									"pm.environment.set(\"adminName\", \"admin\");\r",
									"pm.environment.set(\"adminPass\", \"admin\");\r",
									"pm.environment.set(\"adminToken\", \"-1\");\r",
									"pm.environment.set(\"userId\", \"-1\");\r",
									"pm.environment.set(\"adminId\", \"-1\");\r",
									"\r",
									"if (!pm.environment.get(\"userName\")) throw new Error(\"Environment variable 'userName' is not set!\");\r",
									"if (!pm.environment.get(\"userPass\")) throw new Error(\"Environment variable 'userPass' is not set!\");\r",
									"if (!pm.environment.get(\"adminName\")) throw new Error(\"Environment variable 'adminName' is not set!\");\r",
									"if (!pm.environment.get(\"adminPass\")) throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
									"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
									"if (!pm.environment.get(\"userId\")) throw new Error(\"Environment variable 'userId' is not set!\");\r",
									"if (!pm.environment.get(\"adminId\")) throw new Error(\"Environment variable 'adminId' is not set!\");"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"empty request\",\r\n    \"password\" : \"empty request\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/auth/user/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin unauthorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 UNAUTHORIZED\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/auth/user/r_a/all",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"r_a",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const data = pm.response.json();\r",
									"\r",
									"pm.test(\"Have token\", function () {\r",
									"    pm.expect(data).to.have.property(\"token\");\r",
									"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
									"});\r",
									"\r",
									"pm.environment.set(\"adminToken\", data.token);"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"userName\")) {\r",
									"    throw new Error(\"Environment variable 'userName' is not set!\");\r",
									"}\r",
									"if (!pm.environment.get(\"userPass\")) {\r",
									"    throw new Error(\"Environment variable 'userPass' is not set!\");\r",
									"}\r",
									"if (!pm.environment.get(\"adminName\")) {\r",
									"    throw new Error(\"Environment variable 'adminName' is not set!\");\r",
									"}\r",
									"if (!pm.environment.get(\"adminPass\")) {\r",
									"    throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"{{adminName}}\",\r\n    \"password\" : \"{{adminPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/auth/user/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "no test check user exists and set userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let user_name = pm.environment.get(\"userName\");\r",
									"\r",
									"try {\r",
									"    const data = pm.response.json();\r",
									"    const user = data.find(u => u.name === user_name);\r",
									"    \r",
									"    if (user) {\r",
									"        pm.environment.set(\"userId\", user.id);\r",
									"        console.log(\"User found and ID set:\", user.id);\r",
									"    } else {\r",
									"        console.log(\"User not found:\", user_name);\r",
									"    }\r",
									"} catch (e) {\r",
									"    console.log(\"Error parsing response or setting variable:\", e);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"adminToken\")) {\r",
									"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/auth/user/r_a/all",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"r_a",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin delete user if exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"userId\")) {\r",
									"    throw new Error(\"Environment variable 'userId' is not set!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/auth/user/r_a/delete/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"r_a",
								"delete",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user fail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"404 NOTFOUND\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"{{userName}}\",\r\n    \"password\" : \"{{userPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/auth/user/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 CREATED\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const data = pm.response.json();\r",
									"\r",
									"pm.test(\"Have token\", function () {\r",
									"    pm.expect(data).to.have.property(\"token\");\r",
									"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\" : \"{{userName}}\",\r\n    \"password\" : \"{{userPass}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/auth/user/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin check user exists and set userId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let user_name = pm.environment.get(\"userName\");\r",
									"\r",
									"pm.test(\"Expect user with name: \" + user_name, function () {\r",
									"    const data = pm.response.json();\r",
									"    const user = data.find(u => u.name === user_name);\r",
									"    pm.expect(user, user_name + \" not found\").to.not.be.undefined;\r",
									"    \r",
									"    pm.environment.set(\"userId\", user.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"adminToken\")) {\r",
									"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/auth/user/r_a/all",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"r_a",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"userId\")) {\r",
									"    throw new Error(\"Environment variable 'userId' is not set!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/auth/user/r_a/delete/{{userId}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"r_a",
								"delete",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin check user don't exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const data = pm.response.json();\r",
									"\r",
									"const user_name = pm.environment.get(\"userName\");\r",
									"\r",
									"pm.test(\"Expect user with name: \" + user_name, function () {\r",
									"    pm.expect(Array.isArray(data), \"Response is not an array\").to.be.true;\r",
									"\r",
									"    const exists = data.some(u => u.name === user_name);\r",
									"    pm.expect(exists).to.be.false;\r",
									"});\r",
									"\r",
									"\r",
									"const admin_name = pm.environment.get(\"adminName\");\r",
									"\r",
									"pm.test(\"Expect admin with name: \" + admin_name, function () {\r",
									"    const user = data.find(u => u.name === admin_name);\r",
									"    pm.expect(user, admin_name + \" not found\").to.not.be.undefined;\r",
									"    \r",
									"    pm.environment.set(\"adminId\", user.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/auth/user/r_a/all",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"r_a",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin try delete themself",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"409 CONFLICT\", function() {\r",
									"    pm.response.to.have.status(409);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (!pm.environment.get(\"adminId\")) {\r",
									"    throw new Error(\"Environment variable 'adminId' is not set!\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/auth/user/r_a/delete/{{adminId}}",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"auth",
								"user",
								"r_a",
								"delete",
								"{{adminId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "lib-service",
			"item": [
				{
					"name": "author",
					"item": [
						{
							"name": "INIT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"adminName\", \"admin\");\r",
											"pm.environment.set(\"adminPass\", \"admin\");\r",
											"pm.environment.set(\"adminToken\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"adminName\")) throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"if (!pm.environment.get(\"adminPass\")) throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"\r",
											"\r",
											"pm.environment.set(\"pageSize\", \"2\");\r",
											"pm.environment.set(\"authorFullName1\", \"authorName1\");\r",
											"pm.environment.set(\"authorDateOfBirth1\", \"1993-10-28\");\r",
											"pm.environment.set(\"authorFullName1_edit\", \"authorName2\");\r",
											"pm.environment.set(\"authorDateOfBirth1_edit\", \"1992-11-27\");\r",
											"pm.environment.set(\"authorFullName_Part\", \"orNa\");\r",
											"pm.environment.set(\"authorId1\", \"-1\");\r",
											"pm.environment.set(\"authorId2\", \"-1\");\r",
											"pm.environment.set(\"authorId3\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"pageSize\")) throw new Error(\"Environment variable 'pageSize' is not set!\");\r",
											"if (!pm.environment.get(\"authorFullName1\")) throw new Error(\"Environment variable 'authorFullName1' is not set!\");\r",
											"if (!pm.environment.get(\"authorDateOfBirth1\")) throw new Error(\"Environment variable 'authorDateOfBirth1' is not set!\");\r",
											"if (!pm.environment.get(\"authorFullName1_edit\")) throw new Error(\"Environment variable 'authorFullName1_edit' is not set!\");\r",
											"if (!pm.environment.get(\"authorDateOfBirth1_edit\")) throw new Error(\"Environment variable 'authorDateOfBirth1_edit' is not set!\");\r",
											"if (!pm.environment.get(\"authorFullName_Part\")) throw new Error(\"Environment variable 'authorFullName_Part' is not set!\");\r",
											"if (!pm.environment.get(\"authorId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");\r",
											"if (!pm.environment.get(\"authorId2\")) throw new Error(\"Environment variable 'authorId2' is not set!\");\r",
											"if (!pm.environment.get(\"authorId3\")) throw new Error(\"Environment variable 'authorId3' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"empty request\",\r\n    \"password\" : \"empty request\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Have token\", function () {\r",
											"    pm.expect(data).to.have.property(\"token\");\r",
											"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"adminToken\", data.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userName\")) {\r",
											"    throw new Error(\"Environment variable 'userName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"userPass\")) {\r",
											"    throw new Error(\"Environment variable 'userPass' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminName\")) {\r",
											"    throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminPass\")) {\r",
											"    throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{adminName}}\",\r\n    \"password\" : \"{{adminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author1 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId1}}?delete_books=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId1}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author2 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId2\")) throw new Error(\"Environment variable 'authorId2' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId2}}?delete_books=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId2}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author3 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId3\")) throw new Error(\"Environment variable 'authorId3' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId3}}?delete_books=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId3}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add author1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"authorFullName1\")) {\r",
											"    throw new Error(\"Environment variable 'authorFullName1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"authorDateOfBirth1\")) {\r",
											"    throw new Error(\"Environment variable 'authorDateOfBirth1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"const author_full_name = pm.environment.get(\"authorFullName1\");\r",
											"const date_of_birth = pm.environment.get(\"authorDateOfBirth1\");\r",
											"\r",
											"pm.test(\"Expect get author id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Author id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"fullName\");\r",
											"    pm.expect(data.fullName, \"fullName doesn't match\").equal(author_full_name);\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"dateOfBirth\");\r",
											"    pm.expect(data.dateOfBirth, \"date_of_birth doesn't match\").equal(date_of_birth);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"authorId1\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"{{authorFullName1}}\",\r\n    \"dateOfBirth\": \"{{authorDateOfBirth1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/author/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add author2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get author id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Author id should not be null or undefined\").to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"authorId2\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"{{$randomFullName}}\",\r\n    \"dateOfBirth\": \"{{authorDateOfBirth1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/author/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add author3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get author id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Author id should not be null or undefined\").to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"authorId3\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"{{$randomFullName}}\",\r\n    \"dateOfBirth\": \"{{authorDateOfBirth1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/author/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all authors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(Array.isArray(data)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Array is not empty\", function () {\r",
											"    pm.expect(data.length).to.be.above(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Each author contains required fields\", () => {\r",
											"    if (data.length > 0) {\r",
											"        const author = data[0];\r",
											"        pm.expect(author).to.have.property(\"id\");\r",
											"        pm.expect(author).to.have.property(\"fullName\");\r",
											"        pm.expect(author).to.have.property(\"dateOfBirth\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "get page authors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array in content\", function () {\r",
											"    pm.expect(data, \"Response should have a content property\").to.have.property(\"content\");\r",
											"    pm.expect(Array.isArray(data.content), \"Content should be an array\").to.be.true;\r",
											"    pm.expect(data.content.length, \"Content size should be equal to pageSize\").to.equal(parseInt(pm.environment.get(\"pageSize\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/page?page=0&size={{pageSize}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"page"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get author1 by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"302 FOUND\", function() {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains author with id: \" , function () {\r",
											"    const data = pm.response.json();\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id).to.eql(parseInt(pm.environment.get(\"authorId1\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"fullName\");\r",
											"    pm.expect(data.fullName, \"author fullName doesn't match\").to.eql(pm.environment.get(\"authorFullName1\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/{{authorId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"{{authorId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get authors by part of name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Every fullName contains substring\", function () {\r",
											"    const data = pm.response.json();\r",
											"    const part_name = pm.environment.get(\"authorFullName_Part\");\r",
											"\r",
											"    pm.expect(Array.isArray(data)).to.be.true;\r",
											"\r",
											"    const allMatch = data.every(author => author.fullName && author.fullName.includes(part_name));\r",
											"\r",
											"    pm.expect(allMatch, `Not all fullName contain '${part_name}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorFullName_Part\")) throw new Error(\"Environment variable 'authorFullName_Part' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author?fullName_part={{authorFullName_Part}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author"
									],
									"query": [
										{
											"key": "fullName_part",
											"value": "{{authorFullName_Part}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin edit author1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorFullName1_edit\")) throw new Error(\"Environment variable 'authorFullName1_edit' is not set!\");\r",
											"if (!pm.environment.get(\"authorDateOfBirth1_edit\")) throw new Error(\"Environment variable 'authorDateOfBirth1_edit' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"const author_id = parseInt(pm.environment.get(\"authorId1\"));\r",
											"const author_full_name = pm.environment.get(\"authorFullName1_edit\");\r",
											"const author_date_of_birth = pm.environment.get(\"authorDateOfBirth1_edit\");\r",
											"\r",
											"pm.test(\"Expect author with edited fullName, dateOfBirth\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(author_id);\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"fullName\");\r",
											"    pm.expect(data.fullName, \"fullName doesn't match\").equal(author_full_name);\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"dateOfBirth\");\r",
											"    pm.expect(data.dateOfBirth, \"date_of_birth doesn't match\").equal(author_date_of_birth);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{authorId1}},\r\n    \"fullName\": \"{{authorFullName1_edit}}\",\r\n    \"dateOfBirth\": \"{{authorDateOfBirth1_edit}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/author/r_a/update",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId1}}?delete_books=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId1}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId2\")) throw new Error(\"Environment variable 'authorId2' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId2}}?delete_books=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId2}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId3\")) throw new Error(\"Environment variable 'authorId3' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId3}}?delete_books=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId3}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin checks deleting author2 author3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Doesn't contain authors with deleted ids\", function () {\r",
											"    pm.expect(Array.isArray(data)).to.be.true;\r",
											"    \r",
											"    const auhtor_id_1 = pm.environment.get(\"authorId1\");\r",
											"    const auhtor_id_2 = pm.environment.get(\"authorId2\");\r",
											"    const auhtor_id_3 = pm.environment.get(\"authorId3\");\r",
											"    const exists = data.some(author => String(author.id) === auhtor_id_1\r",
											"        || String(author.id) === auhtor_id_2 || String(author.id) === auhtor_id_3);\r",
											"    pm.expect(exists, `Array contains forbidden authors with id ${auhtor_id_1} or ${auhtor_id_2} or ${auhtor_id_3}`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"all"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "genre",
					"item": [
						{
							"name": "INIT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"adminName\", \"admin\");\r",
											"pm.environment.set(\"adminPass\", \"admin\");\r",
											"pm.environment.set(\"adminToken\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"adminName\")) throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"if (!pm.environment.get(\"adminPass\")) throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"\r",
											"\r",
											"pm.environment.set(\"pageSize\", \"2\");\r",
											"pm.environment.set(\"genreName1\", \"genreName1\");\r",
											"pm.environment.set(\"genreName1_edit\", \"genreName2\");\r",
											"pm.environment.set(\"genreName_Part\", \"enreNa\");\r",
											"pm.environment.set(\"genreId1\", \"-1\");\r",
											"pm.environment.set(\"genreId2\", \"-1\");\r",
											"pm.environment.set(\"genreId3\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"pageSize\")) throw new Error(\"Environment variable 'pageSize' is not set!\");\r",
											"if (!pm.environment.get(\"genreName1\")) throw new Error(\"Environment variable 'genreName1' is not set!\");\r",
											"if (!pm.environment.get(\"genreName1_edit\")) throw new Error(\"Environment variable 'genreName1_edit' is not set!\");\r",
											"if (!pm.environment.get(\"genreName_Part\")) throw new Error(\"Environment variable 'genreName_Part' is not set!\");\r",
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'genreId1' is not set!\");\r",
											"if (!pm.environment.get(\"genreId2\")) throw new Error(\"Environment variable 'genreId2' is not set!\");\r",
											"if (!pm.environment.get(\"genreId3\")) throw new Error(\"Environment variable 'genreId3' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"empty request\",\r\n    \"password\" : \"empty request\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Have token\", function () {\r",
											"    pm.expect(data).to.have.property(\"token\");\r",
											"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"adminToken\", data.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userName\")) {\r",
											"    throw new Error(\"Environment variable 'userName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"userPass\")) {\r",
											"    throw new Error(\"Environment variable 'userPass' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminName\")) {\r",
											"    throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminPass\")) {\r",
											"    throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{adminName}}\",\r\n    \"password\" : \"{{adminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre1 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'genreId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre2 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId2\")) throw new Error(\"Environment variable 'genreId2' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId2}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre3 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId3\")) throw new Error(\"Environment variable 'genreId3' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId3}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add genre1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"genreName1\")) {\r",
											"    throw new Error(\"Environment variable 'genreName1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get genre id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"name\");\r",
											"    pm.expect(data.name, \"name doesn't match\").equal(pm.environment.get(\"genreName1\"));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"genreId1\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{genreName1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add genre2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get genre id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"genreId2\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add genre3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get genre id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"genreId3\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all genres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", function () {\r",
											"    pm.expect(Array.isArray(data)).to.be.true;\r",
											"});\r",
											"\r",
											"pm.test(\"Array is not empty\", function () {\r",
											"    pm.expect(data.length).to.be.above(2);\r",
											"});\r",
											"\r",
											"pm.test(\"Each genre contains required fields\", () => {\r",
											"    if (data.length > 0) {\r",
											"        const genre = data[0];\r",
											"        pm.expect(genre).to.have.property(\"id\");\r",
											"        pm.expect(genre).to.have.property(\"name\");\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "get page genres",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array in content\", function () {\r",
											"    pm.expect(data, \"Response should have a content property\").to.have.property(\"content\");\r",
											"    pm.expect(Array.isArray(data.content), \"Content should be an array\").to.be.true;\r",
											"    pm.expect(data.content.length, \"Content size should be equal to pageSize\").to.equal(parseInt(pm.environment.get(\"pageSize\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/page?page=0&size={{pageSize}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"page"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get genre1 by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"302 FOUND\", function() {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains author with id: \" , function () {\r",
											"    const data = pm.response.json();\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"genre id doesn't match\").to.eql(parseInt(pm.environment.get(\"genreId1\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"name\");\r",
											"    pm.expect(data.name, \"genre name doesn't match\").to.eql(pm.environment.get(\"genreName1\"));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/{{genreId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"{{genreId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get genres by part of name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Every name contains substring\", function () {\r",
											"    const data = pm.response.json();\r",
											"    const part_name = pm.environment.get(\"genreName_Part\");\r",
											"\r",
											"    pm.expect(Array.isArray(data)).to.be.true;\r",
											"\r",
											"    const allMatch = data.every(author => author.name && author.name.includes(part_name));\r",
											"\r",
											"    pm.expect(allMatch, `Not all names contain '${part_name}'`).to.be.true;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreName_Part\")) throw new Error(\"Environment variable 'genreName_Part' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre?name_part={{genreName_Part}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre"
									],
									"query": [
										{
											"key": "name_part",
											"value": "{{genreName_Part}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin edit gerne1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreName1_edit\")) throw new Error(\"Environment variable 'genreName1_edit' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"const genre_id = parseInt(pm.environment.get(\"genreId1\"));\r",
											"const genre_full_name = pm.environment.get(\"genreName1_edit\");\r",
											"\r",
											"pm.test(\"Expect genre with edited name\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(genre_id);\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"name\");\r",
											"    pm.expect(data.name, \"name doesn't match\").equal(genre_full_name);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{genreId1}},\r\n    \"name\": \"{{genreName1_edit}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/update",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'genreId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId2\")) throw new Error(\"Environment variable 'genreId2' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId2}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId3\")) throw new Error(\"Environment variable 'genreId3' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId3}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin checks deleting genre1 genre2 genre3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Doesn't contain authors with deleted ids\", function () {\r",
											"    pm.expect(Array.isArray(data)).to.be.true;\r",
											"    \r",
											"    const genre_id_1 = pm.environment.get(\"genreId1\");\r",
											"    const genre_id_2 = pm.environment.get(\"genreId2\");\r",
											"    const genre_id_3 = pm.environment.get(\"genreId3\");\r",
											"    const exists = data.some(genre => String(genre.id) === genre_id_1\r",
											"        || String(genre.id) === genre_id_2 || String(genre.id) === genre_id_3);\r",
											"    pm.expect(exists, `Array contains forbidden genres with id ${genre_id_1} or ${genre_id_2} or ${genre_id_3}`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"all"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "book",
					"item": [
						{
							"name": "INIT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"adminName\", \"admin\");\r",
											"pm.environment.set(\"adminPass\", \"admin\");\r",
											"pm.environment.set(\"adminToken\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"adminName\")) throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"if (!pm.environment.get(\"adminPass\")) throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"\r",
											"\r",
											"pm.environment.set(\"pageSize\", \"2\");\r",
											"pm.environment.set(\"bookTitle1\", \"bookName1\");\r",
											"pm.environment.set(\"bookOneDayRentPriceUSD1\", \"14.01\");\r",
											"pm.environment.set(\"bookAvailableQuantity1\", \"5\");\r",
											"pm.environment.set(\"bookTitle1_edit\", \"bookName2\");\r",
											"pm.environment.set(\"bookOneDayRentPriceUSD1_edit\", \"6.34\");\r",
											"pm.environment.set(\"bookAvailableQuantity1_edit\", \"8\");\r",
											"pm.environment.set(\"bookId1\", \"-1\");\r",
											"pm.environment.set(\"bookId2\", \"-1\");\r",
											"pm.environment.set(\"bookId3\", \"-1\");\r",
											"pm.environment.set(\"bookTitle1_Part\", \"okNam\");\r",
											"pm.environment.set(\"booOneDayRentPriceUSD_min\", \"13.7\");\r",
											"pm.environment.set(\"booOneDayRentPriceUSD_max\", \"15.03\");\r",
											"pm.environment.set(\"bookAvailableQuantity_changeOn\", \"2\");\r",
											"\r",
											"if (!pm.environment.get(\"pageSize\")) throw new Error(\"Environment variable 'pageSize' is not set!\");\r",
											"if (!pm.environment.get(\"bookTitle1\")) throw new Error(\"Environment variable 'bookTitle1' is not set!\");\r",
											"if (!pm.environment.get(\"bookOneDayRentPriceUSD1\")) throw new Error(\"Environment variable 'bookOneDayRentPriceUSD1' is not set!\");\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1_edit\")) throw new Error(\"Environment variable 'bookAvailableQuantity1_edit' is not set!\");\r",
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"bookId2\")) throw new Error(\"Environment variable 'bookId2' is not set!\");\r",
											"if (!pm.environment.get(\"bookId3\")) throw new Error(\"Environment variable 'bookId3' is not set!\");\r",
											"if (!pm.environment.get(\"bookTitle1_Part\")) throw new Error(\"Environment variable 'bookTitle1_Part' is not set!\");\r",
											"if (!pm.environment.get(\"booOneDayRentPriceUSD_min\")) throw new Error(\"Environment variable 'booOneDayRentPriceUSD_min' is not set!\");\r",
											"if (!pm.environment.get(\"booOneDayRentPriceUSD_max\")) throw new Error(\"Environment variable 'booOneDayRentPriceUSD_max' is not set!\");\r",
											"if (!pm.environment.get(\"bookAvailableQuantity_changeOn\")) throw new Error(\"Environment variable 'bookAvailableQuantity_changeOn' is not set!\");\r",
											"\r",
											"\r",
											"pm.environment.set(\"genreName1\", \"genreName1\");\r",
											"pm.environment.set(\"genreId1\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"genreName1\")) throw new Error(\"Environment variable 'genreName1' is not set!\");\r",
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'genreId1' is not set!\");\r",
											"\r",
											"\r",
											"pm.environment.set(\"authorFullName1\", \"authorName1\");\r",
											"pm.environment.set(\"authorDateOfBirth1\", \"1993-10-28\");\r",
											"pm.environment.set(\"authorId1\", \"-1\");\r",
											"if (!pm.environment.get(\"authorFullName1\")) throw new Error(\"Environment variable 'authorFullName1' is not set!\");\r",
											"if (!pm.environment.get(\"authorDateOfBirth1\")) throw new Error(\"Environment variable 'authorDateOfBirth1' is not set!\");\r",
											"if (!pm.environment.get(\"authorId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"empty request\",\r\n    \"password\" : \"empty request\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Have token\", function () {\r",
											"    pm.expect(data).to.have.property(\"token\");\r",
											"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"adminToken\", data.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userName\")) {\r",
											"    throw new Error(\"Environment variable 'userName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"userPass\")) {\r",
											"    throw new Error(\"Environment variable 'userPass' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminName\")) {\r",
											"    throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminPass\")) {\r",
											"    throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{adminName}}\",\r\n    \"password\" : \"{{adminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete book1 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/delete/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"delete",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete book2 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId2\")) throw new Error(\"Environment variable 'bookId2' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/delete/{{bookId2}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"delete",
										"{{bookId2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete book3 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId3\")) throw new Error(\"Environment variable 'bookId3' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/delete/{{bookId3}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"delete",
										"{{bookId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add book1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookTitle1\")) {\r",
											"    throw new Error(\"Environment variable 'genreName1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookOneDayRentPriceUSD1\")) {\r",
											"    throw new Error(\"Environment variable 'bookOneDayRentPriceUSD1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1\")) {\r",
											"    throw new Error(\"Environment variable 'bookAvailableQuantity1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", () => pm.response.to.have.status(201));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get book id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"title\");\r",
											"    pm.expect(data.title, \"title doesn't match\").equal(pm.environment.get(\"bookTitle1\"));\r",
											"    \r",
											"    pm.expect(data, \"Expect get book genre from response\").to.have.property(\"genre\");\r",
											"    pm.expect(data.genre, \"genre doesn't match\").eql(null);\r",
											"    pm.expect(data, \"Expect get book author from response\").to.have.property(\"author\");\r",
											"    pm.expect(data.author, \"author doesn't match\").eql(null);\r",
											"\r",
											"    pm.expect(data).to.have.property(\"oneDayRentPriceUSD\");\r",
											"    pm.expect(data.oneDayRentPriceUSD, \"oneDayRentPriceUSD doesn't match\").equal(parseFloat(pm.environment.get(\"bookOneDayRentPriceUSD1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity doesn't match\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\")));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bookId1\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{bookTitle1}}\",\r\n    \"oneDayRentPriceUSD\": \"{{bookOneDayRentPriceUSD1}}\",\r\n    \"availableQuantity\": \"{{bookAvailableQuantity1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/book/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add book2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", () => pm.response.to.have.status(201));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get book id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data, \"Expect get book genre from response\").to.have.property(\"genre\");\r",
											"    pm.expect(data.genre, \"genre doesn't match\").eql(null);\r",
											"    pm.expect(data, \"Expect get book author from response\").to.have.property(\"author\");\r",
											"    pm.expect(data.author, \"author doesn't match\").eql(null);\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"title\");\r",
											"    pm.expect(data.title, \"title doesn't match\").equal(pm.environment.get(\"bookTitle1\"));\r",
											"    \r",
											"    pm.expect(data, \"have not oneDayRentPriceUSD\").to.have.property(\"oneDayRentPriceUSD\");\r",
											"    pm.expect(data, \"have not availableQuantity\").to.have.property(\"availableQuantity\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bookId2\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{bookTitle1}}\",\r\n    \"oneDayRentPriceUSD\": 30,\r\n    \"availableQuantity\": 30\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/book/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add book3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", () => pm.response.to.have.status(201));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get book id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data, \"Expect get book genre from response\").to.have.property(\"genre\");\r",
											"    pm.expect(data.genre, \"genre doesn't match\").eql(null);\r",
											"    pm.expect(data, \"Expect get book author from response\").to.have.property(\"author\");\r",
											"    pm.expect(data.author, \"author doesn't match\").eql(null);\r",
											"\r",
											"    pm.expect(data, \"have not title\").to.have.property(\"title\");\r",
											"    pm.expect(data, \"have not oneDayRentPriceUSD\").to.have.property(\"oneDayRentPriceUSD\");\r",
											"    pm.expect(data, \"have not availableQuantity\").to.have.property(\"availableQuantity\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bookId3\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{$randomFirstName}}\",\r\n    \"oneDayRentPriceUSD\": 100,\r\n    \"availableQuantity\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/book/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all books",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookTitle1_Part\")) {\r",
											"    throw new Error(\"Environment variable 'bookTitle1_Part' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"booOneDayRentPriceUSD_min\")) {\r",
											"    throw new Error(\"Environment variable 'booOneDayRentPriceUSD_min' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"booOneDayRentPriceUSD_max\")) {\r",
											"    throw new Error(\"Environment variable 'booOneDayRentPriceUSD_max' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(data)).true);\r",
											"pm.test(\"Array is not empty\", () => pm.expect(data.length).above(0));\r",
											"\r",
											"pm.test(\"Title contains searched part\", () => {\r",
											"    const titlePart = pm.variables.get(\"bookTitle1_Part\")?.toLowerCase();\r",
											"    data.forEach(book => {\r",
											"        if (titlePart) {\r",
											"            pm.expect(book.title.toLowerCase()).to.include(titlePart);\r",
											"        }\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Price is within the specified range\", () => {\r",
											"    const min = parseFloat(pm.environment.get(\"booOneDayRentPriceUSD_min\"));\r",
											"    const max = parseFloat(pm.environment.get(\"booOneDayRentPriceUSD_max\"));\r",
											"\r",
											"    data.forEach(book => {\r",
											"        const price = parseFloat(book.oneDayRentPriceUSD);\r",
											"        if (!isNaN(min)) pm.expect(price).to.be.at.least(min);\r",
											"        if (!isNaN(max)) pm.expect(price).to.be.at.most(max);\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Book is available\", () => {\r",
											"    data.forEach(book => {\r",
											"        pm.expect(book.availableQuantity).to.be.above(0);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/all?title_part={{bookTitle1_Part}}&oneDayRentPriceUSD_min={{booOneDayRentPriceUSD_min}}&oneDayRentPriceUSD_max={{booOneDayRentPriceUSD_max}}&isAvailable=true",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"all"
									],
									"query": [
										{
											"key": "title_part",
											"value": "{{bookTitle1_Part}}"
										},
										{
											"key": "oneDayRentPriceUSD_min",
											"value": "{{booOneDayRentPriceUSD_min}}"
										},
										{
											"key": "oneDayRentPriceUSD_max",
											"value": "{{booOneDayRentPriceUSD_max}}"
										},
										{
											"key": "isAvailable",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get page books",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array in content\", function () {\r",
											"    pm.expect(data, \"Response should have a content property\").to.have.property(\"content\");\r",
											"    pm.expect(Array.isArray(data.content), \"Content should be an array\").to.be.true;\r",
											"    pm.expect(data.content.length, \"Content size should be equal to pageSize\").to.equal(parseInt(pm.environment.get(\"pageSize\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"pageSize\")) throw new Error(\"Environment variable 'pageSize' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/page?page=0&size={{pageSize}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"page"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "{{pageSize}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get book1 by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"302 FOUND\", function() {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Expect get book by id from response\", function () {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"title\");\r",
											"    pm.expect(data.title, \"title doesn't match\").equal(pm.environment.get(\"bookTitle1\"));\r",
											"    \r",
											"    pm.expect(data, \"Expect get book genre from response\").property(\"genre\");\r",
											"    pm.expect(data, \"Expect get book author from response\").property(\"author\");\r",
											"\r",
											"    pm.expect(data).to.have.property(\"oneDayRentPriceUSD\");\r",
											"    pm.expect(data.oneDayRentPriceUSD, \"oneDayRentPriceUSD doesn't match\").equal(parseFloat(pm.environment.get(\"bookOneDayRentPriceUSD1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity doesn't match\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin change availableQuantity book1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookId1\")) {\r",
											"    throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get book id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity doesn't match\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\")) + parseInt(pm.environment.get(\"bookAvailableQuantity_changeOn\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/update/{{bookId1}}?quantity_change_on={{bookAvailableQuantity_changeOn}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"update",
										"{{bookId1}}"
									],
									"query": [
										{
											"key": "quantity_change_on",
											"value": "{{bookAvailableQuantity_changeOn}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin update book1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookId1\")) {\r",
											"    throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookTitle1_edit\")) {\r",
											"    throw new Error(\"Environment variable 'bookTitle1_edit' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookOneDayRentPriceUSD1_edit\")) {\r",
											"    throw new Error(\"Environment variable 'bookOneDayRentPriceUSD1_edit' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1_edit\")) {\r",
											"    throw new Error(\"Environment variable 'bookAvailableQuantity1_edit' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect updated book from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"title\");\r",
											"    pm.expect(data.title, \"title doesn't match\").equal(pm.environment.get(\"bookTitle1_edit\"));\r",
											"    \r",
											"    pm.expect(data, \"Expect get book genre from response\").to.have.property(\"genre\");\r",
											"    pm.expect(data, \"Expect get book author from response\").to.have.property(\"author\");\r",
											"\r",
											"    pm.expect(data).to.have.property(\"oneDayRentPriceUSD\");\r",
											"    pm.expect(data.oneDayRentPriceUSD, \"oneDayRentPriceUSD doesn't match\").equal(parseFloat(pm.environment.get(\"bookOneDayRentPriceUSD1_edit\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity doesn't match\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1_edit\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": {{bookId1}},\r\n    \"title\": \"{{bookTitle1_edit}}\",\r\n    \"oneDayRentPriceUSD\": \"{{bookOneDayRentPriceUSD1_edit}}\",\r\n    \"availableQuantity\": \"{{bookAvailableQuantity1_edit}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/book/r_a/update",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre1 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'genreId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add genre1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"genreName1\")) {\r",
											"    throw new Error(\"Environment variable 'genreName1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get genre id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"name\");\r",
											"    pm.expect(data.name, \"name doesn't match\").equal(pm.environment.get(\"genreName1\"));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"genreId1\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{genreName1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author1 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId1}}?delete_books=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId1}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add author1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"authorFullName1\")) {\r",
											"    throw new Error(\"Environment variable 'authorFullName1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"authorDateOfBirth1\")) {\r",
											"    throw new Error(\"Environment variable 'authorDateOfBirth1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function() {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"const author_full_name = pm.environment.get(\"authorFullName1\");\r",
											"const date_of_birth = pm.environment.get(\"authorDateOfBirth1\");\r",
											"\r",
											"pm.test(\"Expect get author id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Author id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"fullName\");\r",
											"    pm.expect(data.fullName, \"fullName doesn't match\").equal(author_full_name);\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"dateOfBirth\");\r",
											"    pm.expect(data.dateOfBirth, \"date_of_birth doesn't match\").equal(date_of_birth);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"authorId1\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"{{authorFullName1}}\",\r\n    \"dateOfBirth\": \"{{authorDateOfBirth1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/author/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin assosiate book1 with author1 and genre1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookId1\")) {\r",
											"    throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"genreId1\")) {\r",
											"    throw new Error(\"Environment variable 'genreId1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"authorId1\")) {\r",
											"    throw new Error(\"Environment variable 'authorId1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect book assosiated with genre and author\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"author\");\r",
											"    pm.expect(data.author, \"author doesn't have id\").to.have.property(\"id\");\r",
											"    pm.expect(data.author.id, \"author doesn't match\").equal(parseInt(pm.environment.get(\"authorId1\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"genre\");\r",
											"    pm.expect(data.genre, \"genre doesn't have id\").to.have.property(\"id\");\r",
											"    pm.expect(data.genre.id, \"genre doesn't match\").equal(parseInt(pm.environment.get(\"genreId1\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/associate?book_id={{bookId1}}&genre_id={{genreId1}}&author_id={{authorId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"associate"
									],
									"query": [
										{
											"key": "book_id",
											"value": "{{bookId1}}"
										},
										{
											"key": "genre_id",
											"value": "{{genreId1}}"
										},
										{
											"key": "author_id",
											"value": "{{authorId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin assosiate book2 with author1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookId2\")) {\r",
											"    throw new Error(\"Environment variable 'bookId2' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"authorId1\")) {\r",
											"    throw new Error(\"Environment variable 'authorId1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect book assosiated with author\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId2\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"author\");\r",
											"    pm.expect(data.author).to.have.property(\"id\");\r",
											"    pm.expect(data.author.id, \"author doesn't match\").equal(parseInt(pm.environment.get(\"authorId1\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"genre\");\r",
											"    pm.expect(data.genre, \"genre doesn't match\").eql(null);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/associate?book_id={{bookId2}}&author_id={{authorId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"associate"
									],
									"query": [
										{
											"key": "book_id",
											"value": "{{bookId2}}"
										},
										{
											"key": "author_id",
											"value": "{{authorId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete author1 and assosiated book1 book2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"authorId1\")) throw new Error(\"Environment variable 'authorId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/author/r_a/delete/{{authorId1}}?delete_books=true",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"author",
										"r_a",
										"delete",
										"{{authorId1}}"
									],
									"query": [
										{
											"key": "delete_books",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "check deleting book1 book2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Doesn't contain authors with deleted ids\", function () {\r",
											"    pm.expect(Array.isArray(data)).to.be.true;\r",
											"    \r",
											"    const id_1 = parseInt(pm.environment.get(\"bookId1\"));\r",
											"    const id_2 = parseInt(pm.environment.get(\"bookId2\"));\r",
											"    const exists = data.some(genre => genre.id === id_1 || genre.id === id_2);\r",
											"    pm.expect(exists, `Array contains forbidden genres with id ${id_1} or ${id_2}`).to.be.false;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin assosiate book3 with genre1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookId3\")) {\r",
											"    throw new Error(\"Environment variable 'bookId3' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"genreId1\")) {\r",
											"    throw new Error(\"Environment variable 'genreId1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect book assosiated with genre\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId3\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"genre\");\r",
											"    pm.expect(data.genre).to.have.property(\"id\");\r",
											"    pm.expect(data.genre.id, \"genre doesn't match\").equal(parseInt(pm.environment.get(\"genreId1\")));\r",
											"\r",
											"    pm.expect(data).to.have.property(\"author\");\r",
											"    pm.expect(data.author, \"author doesn't match\").eql(null);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/associate?book_id={{bookId3}}&genre_id={{genreId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"associate"
									],
									"query": [
										{
											"key": "book_id",
											"value": "{{bookId3}}"
										},
										{
											"key": "genre_id",
											"value": "{{genreId1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "admin can't delete genre1 while assosiated with book3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'genreId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"409 CONFLICT\", function() {\r",
											"    pm.response.to.have.status(409);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete book3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"if (!pm.environment.get(\"bookId3\")) throw new Error(\"Environment variable 'bookId3' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/delete/{{bookId3}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"delete",
										"{{bookId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check book3 deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 NOTFOUND\", function() {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId3\")) throw new Error(\"Environment variable 'bookId3' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/{{bookId3}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"{{bookId3}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete genre1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"if (!pm.environment.get(\"genreId1\")) throw new Error(\"Environment variable 'genreId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/genre/r_a/delete/{{genreId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"genre",
										"r_a",
										"delete",
										"{{genreId1}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"requests": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "user-service",
			"item": [
				{
					"name": "1) prepare (login admin, register user, create book)",
					"item": [
						{
							"name": "INIT",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"userName\", \"user\");\r",
											"pm.environment.set(\"userPass\", \"pass\");\r",
											"pm.environment.set(\"adminName\", \"admin\");\r",
											"pm.environment.set(\"adminPass\", \"admin\");\r",
											"pm.environment.set(\"adminToken\", \"-1\");\r",
											"pm.environment.set(\"userId\", \"-1\");\r",
											"pm.environment.set(\"userToken\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"userName\")) throw new Error(\"Environment variable 'userName' is not set!\");\r",
											"if (!pm.environment.get(\"userPass\")) throw new Error(\"Environment variable 'userPass' is not set!\");\r",
											"if (!pm.environment.get(\"adminName\")) throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"if (!pm.environment.get(\"adminPass\")) throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"if (!pm.environment.get(\"userId\")) throw new Error(\"Environment variable 'userId' is not set!\");\r",
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"\r",
											"\r",
											"pm.environment.set(\"userBalance\", \"50.45\");\r",
											"pm.environment.set(\"orderId1\", \"-1\");\r",
											"pm.environment.set(\"orderRentStart1\", \"-1\");\r",
											"pm.environment.set(\"orderOneDayRentPrice1\", \"-1\");\r",
											"pm.environment.set(\"orderPaidRentPrice1\", \"-1\");\r",
											"pm.environment.set(\"orderId2\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"userBalance\")) throw new Error(\"Environment variable 'userBalance' is not set!\");\r",
											"if (!pm.environment.get(\"orderId1\")) throw new Error(\"Environment variable 'orderId1' is not set!\");\r",
											"if (!pm.environment.get(\"orderRentStart1\")) throw new Error(\"Environment variable 'orderRentStart1' is not set!\");\r",
											"if (!pm.environment.get(\"orderOneDayRentPrice1\")) throw new Error(\"Environment variable 'orderOneDayRentPrice1' is not set!\");\r",
											"if (!pm.environment.get(\"orderPaidRentPrice1\")) throw new Error(\"Environment variable 'orderPaidRentPrice1' is not set!\");\r",
											"if (!pm.environment.get(\"orderId2\")) throw new Error(\"Environment variable 'orderId2' is not set!\");\r",
											"\r",
											"\r",
											"pm.environment.set(\"bookTitle1\", \"bookName1\");\r",
											"pm.environment.set(\"bookOneDayRentPriceUSD1\", \"12.01\");\r",
											"pm.environment.set(\"bookAvailableQuantity1_edit\", \"8\");\r",
											"pm.environment.set(\"bookId1\", \"-1\");\r",
											"if (!pm.environment.get(\"bookTitle1\")) throw new Error(\"Environment variable 'bookTitle1' is not set!\");\r",
											"if (!pm.environment.get(\"bookOneDayRentPriceUSD1\")) throw new Error(\"Environment variable 'bookOneDayRentPriceUSD1' is not set!\");\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1_edit\")) throw new Error(\"Environment variable 'bookAvailableQuantity1_edit' is not set!\");\r",
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"empty request\",\r\n    \"password\" : \"empty request\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Have token\", function () {\r",
											"    pm.expect(data).to.have.property(\"token\");\r",
											"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"adminToken\", data.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) {\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminName\")) {\r",
											"    throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"adminPass\")) {\r",
											"    throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{adminName}}\",\r\n    \"password\" : \"{{adminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete book1 if exists",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/delete/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"delete",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin add book1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")){\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookTitle1\")) {\r",
											"    throw new Error(\"Environment variable 'genreName1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookOneDayRentPriceUSD1\")) {\r",
											"    throw new Error(\"Environment variable 'bookOneDayRentPriceUSD1' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1\")) {\r",
											"    throw new Error(\"Environment variable 'bookAvailableQuantity1' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", () => pm.response.to.have.status(201));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Expect get book id from response\", function () {\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"Genre id should not be null or undefined\").to.be.a(\"number\");\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"title\");\r",
											"    pm.expect(data.title, \"title doesn't match\").equal(pm.environment.get(\"bookTitle1\"));\r",
											"    \r",
											"    pm.expect(data, \"Expect get book genre from response\").to.have.property(\"genre\");\r",
											"    pm.expect(data.genre, \"genre doesn't match\").eql(null);\r",
											"    pm.expect(data, \"Expect get book author from response\").to.have.property(\"author\");\r",
											"    pm.expect(data.author, \"author doesn't match\").eql(null);\r",
											"\r",
											"    pm.expect(data).to.have.property(\"oneDayRentPriceUSD\");\r",
											"    pm.expect(data.oneDayRentPriceUSD, \"oneDayRentPriceUSD doesn't match\").equal(parseFloat(pm.environment.get(\"bookOneDayRentPriceUSD1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity doesn't match\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\")));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"bookId1\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{bookTitle1}}\",\r\n    \"oneDayRentPriceUSD\": \"{{bookOneDayRentPriceUSD1}}\",\r\n    \"availableQuantity\": \"{{bookAvailableQuantity1}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/lib/book/r_a/add",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"add"
									]
								}
							},
							"response": []
						},
						{
							"name": "no test check user exists and set userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"let user_name = pm.environment.get(\"userName\");\r",
											"\r",
											"try {\r",
											"    const data = pm.response.json();\r",
											"    const user = data.find(u => u.name === user_name);\r",
											"    \r",
											"    if (user) {\r",
											"        pm.environment.set(\"userId\", user.id);\r",
											"    }\r",
											"} catch (e) {\r",
											"    console.log(\"Error parsing response or setting variable:\", e);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) {\r",
											"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/auth/user/r_a/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"r_a",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete user if exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userId\")) {\r",
											"    throw new Error(\"Environment variable 'userId' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/auth/user/r_a/delete/{{userId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"r_a",
										"delete",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "register user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Have token\", function () {\r",
											"    pm.expect(data).to.have.property(\"token\");\r",
											"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"userToken\", data.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.environment.get(\"userName\")) {\r",
											"    throw new Error(\"Environment variable 'userName' is not set!\");\r",
											"}\r",
											"if (!pm.environment.get(\"userPass\")) {\r",
											"    throw new Error(\"Environment variable 'userPass' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{userName}}\",\r\n    \"password\" : \"{{userPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/register",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin get all accounts",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(data)).true);\r",
											"pm.test(\"Array is not empty\", () => pm.expect(data.length).above(0));\r",
											"\r",
											"pm.test(\"Is same AccountDTO in array\", () => {\r",
											"    data.forEach(account => {\r",
											"        pm.expect(account, \"no id\").property(\"id\");\r",
											"        pm.expect(account.id, \"id is not a number\").a(\"number\");\r",
											"\r",
											"        pm.expect(account, \"no balanceUSD\").property(\"balanceUSD\");\r",
											"        pm.expect(account.balanceUSD, \"balanceUSD is not a number\").a(\"number\");\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/user/account/r_a/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"account",
										"r_a",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "user check balance and set userBalance userId",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Check UserDTO\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
											"\r",
											"    pm.expect(data, \"no balanceUSD\").property(\"balanceUSD\");\r",
											"    pm.expect(data.balanceUSD, \"balanceUSD is not a number\").a(\"number\");\r",
											"    pm.expect(data.balanceUSD, \"balanceUSD != 0\").equal(0);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"userId\", data.id);\r",
											"pm.environment.set(\"userBalance\", data.balanceUSD);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/user/account/r_u/balance",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"account",
										"r_u",
										"balance"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "2) user make/close order",
					"item": [
						{
							"name": "user make order1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"orderId1\")) throw new Error(\"Environment variable 'orderId1' is not set!\");\r",
											"if (!pm.environment.get(\"orderOneDayRentPrice1\")) throw new Error(\"Environment variable 'orderOneDayRentPrice1' is not set!\");\r",
											"if (!pm.environment.get(\"orderRentStart1\")) throw new Error(\"Environment variable 'orderRentStart1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", () => pm.response.to.have.status(201));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Check OrderDTO\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
											"\r",
											"    pm.expect(data, \"no book_id\").property(\"book_id\");\r",
											"    pm.expect(data.book_id, \"book_id is not a number\").a(\"number\");\r",
											"    pm.expect(data.book_id, \"book_id != bookId1\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"\r",
											"    pm.expect(data, \"no one_day_rent_price_usd\").property(\"one_day_rent_price_usd\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd != bookOneDayRentPriceUSD1\").equal(parseFloat(pm.environment.get(\"bookOneDayRentPriceUSD1\")));\r",
											"\r",
											"    pm.expect(data, \"no paid_price_usd\").property(\"paid_price_usd\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd != 0.0\").equal(0.0);\r",
											"    \r",
											"    const cur_date = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD\r",
											"\r",
											"    pm.expect(data, \"no rent_start\").property(\"rent_start\");\r",
											"    pm.expect(data.rent_start, \"rent_start != \" + cur_date).equal(cur_date);\r",
											"\r",
											"    pm.expect(data, \"no rent_end\").property(\"rent_end\");\r",
											"    pm.expect(data.rent_end, \"rent_end != null\").equal(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"orderId1\", data.id);\r",
											"pm.environment.set(\"orderOneDayRentPrice1\", data.one_day_rent_price_usd);\r",
											"pm.environment.set(\"orderRentStart1\", data.rent_start);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "UserId",
										"value": "1",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/order/r_u/make/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"order",
										"r_u",
										"make",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check book1 was taken (availableQuantity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"302 FOUND\", function() {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Expect book availableQuantity -= 1\", function () {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity != bookAvailableQuantity1 - 1\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\") - 1));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1\")) throw new Error(\"Environment variable 'bookAvailableQuantity1' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin can't delete ordered book1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"409 CONFLICT\", () => pm.response.to.have.status(409));\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/delete/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"delete",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "user can't closer order1 with 0.0 balance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 BAD_REQUEST\", () => pm.response.to.have.status(400));"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "UserId",
										"value": "1",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/order/r_u/close/{{orderId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"order",
										"r_u",
										"close",
										"{{orderId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "user replenishes balance and upate userBalance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"userBalance_changeOn\", 50.45);\r",
											"\r",
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.variables.get(\"userBalance_changeOn\")) throw new Error(\"Environment variable 'userBalance_changeOn' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Changing user balance\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id not equal\").equal(parseInt(pm.environment.get(\"userId\")));\r",
											"\r",
											"    pm.expect(data, \"no balanceUSD\").property(\"balanceUSD\");\r",
											"    pm.expect(data.balanceUSD, \"balanceUSD don't updated\").equal(parseFloat(pm.environment.get(\"userBalance\")) + parseFloat(pm.variables.get(\"userBalance_changeOn\")));\r",
											"});\r",
											"\r",
											"pm.environment.set(\"userBalance\", data.balanceUSD);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/account/r_u/balance?change_on={{userBalance_changeOn}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"account",
										"r_u",
										"balance"
									],
									"query": [
										{
											"key": "change_on",
											"value": "{{userBalance_changeOn}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "user close order1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"orderId1\")) throw new Error(\"Environment variable 'orderId1' is not set!\");\r",
											"if (!pm.environment.get(\"orderOneDayRentPrice1\")) throw new Error(\"Environment variable 'orderOneDayRentPrice1' is not set!\");\r",
											"if (!pm.environment.get(\"orderRentStart1\")) throw new Error(\"Environment variable 'orderRentStart1' is not set!\");\r",
											"if (!pm.environment.get(\"orderPaidRentPrice1\")) throw new Error(\"Environment variable 'orderPaidRentPrice1' is not set!\");\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Check OrderDTO\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
											"    pm.expect(data.id, \"id != orderId1\").equal(parseInt(pm.environment.get(\"orderId1\")));\r",
											"\r",
											"    pm.expect(data, \"no book_id\").property(\"book_id\");\r",
											"    pm.expect(data.book_id, \"book_id is not a number\").a(\"number\");\r",
											"    pm.expect(data.book_id, \"book_id != bookId1\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"\r",
											"    pm.expect(data, \"no one_day_rent_price_usd\").property(\"one_day_rent_price_usd\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd != orderOneDayRentPrice1\").equal(parseFloat(pm.environment.get(\"orderOneDayRentPrice1\")));\r",
											"    \r",
											"    pm.expect(data, \"no rent_start\").property(\"rent_start\");\r",
											"    pm.expect(data.rent_start, \"rent_start != orderRentStart1\").equal(pm.environment.get(\"orderRentStart1\"));\r",
											"\r",
											"    const cur_date = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD\r",
											"    pm.expect(data, \"no rent_end\").property(\"rent_end\");\r",
											"    pm.expect(data.rent_end, \"rent_end != \" + cur_date).equal(cur_date);\r",
											"\r",
											"\r",
											"    const rent_days = daysBetween(data.rent_start, data.rent_end) + 1;    //  +1 (minimum one day rent)\r",
											"    const rent_price_total = rent_days * data.one_day_rent_price_usd;\r",
											"\r",
											"    pm.expect(data, \"no paid_price_usd\").property(\"paid_price_usd\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd != rent_price_total\").equal(rent_price_total);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"orderPaidRentPrice1\", data.paid_price_usd);\r",
											"\r",
											"function daysBetween(dateStr1, dateStr2) {\r",
											"    const date1 = new Date(dateStr1);\r",
											"    const date2 = new Date(dateStr2);\r",
											"\r",
											"    date1.setHours(0, 0, 0, 0);\r",
											"    date2.setHours(0, 0, 0, 0);\r",
											"\r",
											"    const msPerDay = 1000 * 60 * 60 * 24;\r",
											"    const diffInMs = date2 - date1;\r",
											"\r",
											"    return Math.round(diffInMs / msPerDay);\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "UserId",
										"value": "1",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/order/r_u/close/{{orderId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"order",
										"r_u",
										"close",
										"{{orderId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "user check balance and update userBalance",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.environment.get(\"userId\")) throw new Error(\"Environment variable 'userId' is not set!\");\r",
											"if (!pm.environment.get(\"orderPaidRentPrice1\")) throw new Error(\"Environment variable 'orderPaidRentPrice1' is not set!\");\r",
											"if (!pm.environment.get(\"userBalance\")) throw new Error(\"Environment variable 'userBalance' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"UserDTO\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
											"    pm.expect(data.id, \"id != userId\").equal(parseInt(pm.environment.get(\"userId\")));\r",
											"\r",
											"    pm.expect(data, \"no balanceUSD\").property(\"balanceUSD\");\r",
											"    pm.expect(data.balanceUSD, \"balanceUSD is not a number\").a(\"number\");\r",
											"    const expected_balance = parseFloat((parseFloat(pm.environment.get(\"userBalance\")) - parseFloat(pm.environment.get(\"orderPaidRentPrice1\"))).toFixed(2));  //  rounding to 2 decimal \r",
											"    pm.expect(data.balanceUSD, \"balanceUSD != userBalance - orderPaidRentPrice1\").equal(expected_balance);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"userBalance\", data.balanceUSD);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/user/account/r_u/balance",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"account",
										"r_u",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "check book1 was returned (availableQuantity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"302 FOUND\", function() {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Expect get book by id from response\", function () {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity != bookAvailableQuantity1\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1\")) throw new Error(\"Environment variable 'bookAvailableQuantity1' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "3) user make order, admin close order",
					"item": [
						{
							"name": "user make order2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"orderId2\")) throw new Error(\"Environment variable 'orderId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 CREATED\", () => pm.response.to.have.status(201));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Check OrderDTO\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
											"\r",
											"    pm.expect(data, \"no book_id\").property(\"book_id\");\r",
											"    pm.expect(data.book_id, \"book_id is not a number\").a(\"number\");\r",
											"    pm.expect(data.book_id, \"book_id != bookId1\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"\r",
											"    pm.expect(data, \"no one_day_rent_price_usd\").property(\"one_day_rent_price_usd\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd != bookOneDayRentPriceUSD1\").equal(parseFloat(pm.environment.get(\"bookOneDayRentPriceUSD1\")));\r",
											"\r",
											"    pm.expect(data, \"no paid_price_usd\").property(\"paid_price_usd\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd != 0.0\").equal(0.0);\r",
											"    \r",
											"    const cur_date = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD\r",
											"    pm.expect(data, \"no rent_start\").property(\"rent_start\");\r",
											"    pm.expect(data.rent_start, \"rent_start != \" + cur_date).equal(cur_date);\r",
											"\r",
											"    pm.expect(data, \"no rent_end\").property(\"rent_end\");\r",
											"    pm.expect(data.rent_end, \"rent_end != null\").equal(null);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"orderId2\", data.id);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "UserId",
										"value": "1",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/order/r_u/make/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"order",
										"r_u",
										"make",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "check book1 was taken (availableQuantity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"302 FOUND\", function() {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Expect book availableQuantity -= 1\", function () {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity != bookAvailableQuantity1 - 1\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\") - 1));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1\")) throw new Error(\"Environment variable 'bookAvailableQuantity1' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin can't delete user with open order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"400 BAD_REQUEST\", function() {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userId\")) {\r",
											"    throw new Error(\"Environment variable 'userId' is not set!\");\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/auth/user/r_a/delete/{{userId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"r_a",
										"delete",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin close order2 book don''t returns",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"if (!pm.environment.get(\"orderId2\")) throw new Error(\"Environment variable 'orderId2' is not set!\");\r",
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"bookOneDayRentPriceUSD1\")) throw new Error(\"Environment variable 'bookOneDayRentPriceUSD1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Check OrderDTO\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
											"    pm.expect(data.id, \"id != orderId1\").equal(parseInt(pm.environment.get(\"orderId2\")));\r",
											"\r",
											"    pm.expect(data, \"no book_id\").property(\"book_id\");\r",
											"    pm.expect(data.book_id, \"book_id is not a number\").a(\"number\");\r",
											"    pm.expect(data.book_id, \"book_id != bookId1\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"\r",
											"    pm.expect(data, \"no one_day_rent_price_usd\").property(\"one_day_rent_price_usd\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.one_day_rent_price_usd, \"one_day_rent_price_usd != orderOneDayRentPrice1\").equal(parseFloat(pm.environment.get(\"bookOneDayRentPriceUSD1\")));\r",
											"\r",
											"    pm.expect(data, \"no paid_price_usd\").property(\"paid_price_usd\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd is not a number\").a(\"number\");\r",
											"    pm.expect(data.paid_price_usd, \"paid_price_usd != 0.0\").equal(0);\r",
											"    \r",
											"\r",
											"    const cur_date = new Date().toLocaleDateString('en-CA'); // YYYY-MM-DD\r",
											"\r",
											"    pm.expect(data, \"no rent_start\").property(\"rent_start\");\r",
											"    pm.expect(data.rent_start, \"rent_start != cur_date\").equal(cur_date);\r",
											"\r",
											"    pm.expect(data, \"no rent_end\").property(\"rent_end\");\r",
											"    pm.expect(data.rent_end, \"rent_end != cur_date\").equal(cur_date);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "UserId",
										"value": "1",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/order/r_a/close/{{orderId2}}?account_id={{userId}}&return_book=false",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"order",
										"r_a",
										"close",
										"{{orderId2}}"
									],
									"query": [
										{
											"key": "account_id",
											"value": "{{userId}}"
										},
										{
											"key": "return_book",
											"value": "false"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "user check balance don't changed",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
											"if (!pm.environment.get(\"userId\")) throw new Error(\"Environment variable 'userId' is not set!\");\r",
											"if (!pm.environment.get(\"userBalance\")) throw new Error(\"Environment variable 'userBalance' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"UserDTO\", () => {\r",
											"    pm.expect(data, \"no id\").property(\"id\");\r",
											"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
											"    pm.expect(data.id, \"id != userId\").equal(parseInt(pm.environment.get(\"userId\")));\r",
											"\r",
											"    pm.expect(data, \"no balanceUSD\").property(\"balanceUSD\");\r",
											"    pm.expect(data.balanceUSD, \"balanceUSD is not a number\").a(\"number\");\r",
											"    pm.expect(data.balanceUSD, \"balanceUSD != userBalance - orderPaidRentPrice1\").equal(parseFloat(pm.environment.get(\"userBalance\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/user/account/r_u/balance",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"account",
										"r_u",
										"balance"
									]
								}
							},
							"response": []
						},
						{
							"name": "check book1 wasn't return (availableQuantity)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"302 FOUND\", function() {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Expect book availableQuantity -= 1\", function () {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.expect(data).to.have.property(\"id\");\r",
											"    pm.expect(data.id, \"id doesn't match\").equal(parseInt(pm.environment.get(\"bookId1\")));\r",
											"    \r",
											"    pm.expect(data).to.have.property(\"availableQuantity\");\r",
											"    pm.expect(data.availableQuantity, \"availableQuantity != bookAvailableQuantity1 - 1\").equal(parseInt(pm.environment.get(\"bookAvailableQuantity1\") - 1));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");\r",
											"if (!pm.environment.get(\"bookAvailableQuantity1\")) throw new Error(\"Environment variable 'bookAvailableQuantity1' is not set!\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "4) end (delete book, delete user)",
					"item": [
						{
							"name": "admin delete book1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"bookId1\")) throw new Error(\"Environment variable 'bookId1' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/r_a/delete/{{bookId1}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"r_a",
										"delete",
										"{{bookId1}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "admin delete user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function() {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
											"if (!pm.environment.get(\"userId\")) throw new Error(\"Environment variable 'userId' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "localhost:8080/auth/user/r_a/delete/{{userId}}",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"r_a",
										"delete",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"requests": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "gateway",
			"item": [
				{
					"name": "unauthorized",
					"item": [
						{
							"name": "try open end point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(pm.response.json())).true);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "try user end point (../r_u/..)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 UNAUTHORIZED\", () => pm.response.to.have.status(401));\r",
											"\r",
											"pm.test(\"Response has expected Unauthorized structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
											"    pm.expect(jsonData).to.have.property(\"status\", 401);\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");\r",
											"    pm.expect(jsonData).to.have.property(\"path\", \"/user/order/r_u/make/0\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "UserId",
										"value": "1",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/order/r_u/make/0",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"order",
										"r_u",
										"make",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "try admin end pont (../r_a/..)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"401 UNAUTHORIZED\", () => pm.response.to.have.status(401));\r",
											"\r",
											"pm.test(\"Response has expected Unauthorized structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
											"    pm.expect(jsonData).to.have.property(\"status\", 401);\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Unauthorized\");\r",
											"    pm.expect(jsonData).to.have.property(\"path\", \"/auth/user/r_a/all\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/auth/user/r_a/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"r_a",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "try service integration end point (../s-i/..)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 FORBIDDEN\", () => pm.response.to.have.status(403));\r",
											"\r",
											"pm.test(\"Response has expected Forbidden structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
											"    pm.expect(jsonData).to.have.property(\"status\", 403);\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Forbidden\");\r",
											"    pm.expect(jsonData).to.have.property(\"path\", \"/user/account/s-i/0\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/user/account/s-i/0",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"account",
										"s-i",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "admin",
					"item": [
						{
							"name": "INIT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.set(\"adminName\", \"admin\");\r",
											"pm.environment.set(\"adminPass\", \"admin\");\r",
											"pm.environment.set(\"adminToken\", \"-1\");\r",
											"\r",
											"if (!pm.environment.get(\"adminName\")) throw new Error(\"Environment variable 'adminName' is not set!\");\r",
											"if (!pm.environment.get(\"adminPass\")) throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"empty request\",\r\n    \"password\" : \"empty request\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "login admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const data = pm.response.json();\r",
											"\r",
											"pm.test(\"Have token\", function () {\r",
											"    pm.expect(data).to.have.property(\"token\");\r",
											"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
											"});\r",
											"\r",
											"pm.environment.set(\"adminToken\", data.token);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\" : \"{{adminName}}\",\r\n    \"password\" : \"{{adminPass}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:8080/auth/user/login",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "try open end point",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(pm.response.json())).true);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/lib/book/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"lib",
										"book",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "try user end point (../r_u/..)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"//  Admin pass gateway sequrity, but don't have account \r",
											"\r",
											"pm.test(\"404 NOTFOUND\", () => pm.response.to.have.status(404));\r",
											"\r",
											"pm.test(\"Response has expected NOTFOUND structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
											"    pm.expect(jsonData).to.have.property(\"status\", 404);\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Doesn't exists account with id: 1\");\r",
											"    pm.expect(jsonData).to.have.property(\"path\", \"/user/order/r_u/make/0\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "UserId",
										"value": "1",
										"type": "text"
									}
								],
								"url": {
									"raw": "localhost:8080/user/order/r_u/make/0",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"order",
										"r_u",
										"make",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "try admin end pont (../r_a/..)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
											"\r",
											"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(pm.response.json())).true);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/auth/user/r_a/all",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"auth",
										"user",
										"r_a",
										"all"
									]
								}
							},
							"response": []
						},
						{
							"name": "try service integration end point (../s-i/..)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 FORBIDDEN\", () => pm.response.to.have.status(403));\r",
											"\r",
											"pm.test(\"Response has expected Forbidden structure\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
											"    pm.expect(jsonData).to.have.property(\"status\", 403);\r",
											"    pm.expect(jsonData).to.have.property(\"error\", \"Forbidden\");\r",
											"    pm.expect(jsonData).to.have.property(\"path\", \"/user/account/s-i/0\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8080/user/account/s-i/0",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user",
										"account",
										"s-i",
										"0"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "user",
					"item": [
						{
							"name": "1) prepare",
							"item": [
								{
									"name": "INIT",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"userName\", \"user\");\r",
													"pm.environment.set(\"userPass\", \"pass\");\r",
													"pm.environment.set(\"userToken\", \"-1\");\r",
													"pm.environment.set(\"adminName\", \"admin\");\r",
													"pm.environment.set(\"adminPass\", \"admin\");\r",
													"pm.environment.set(\"adminToken\", \"-1\");\r",
													"pm.environment.set(\"userId\", \"-1\");\r",
													"pm.environment.set(\"adminId\", \"-1\");\r",
													"\r",
													"if (!pm.environment.get(\"userName\")) throw new Error(\"Environment variable 'userName' is not set!\");\r",
													"if (!pm.environment.get(\"userPass\")) throw new Error(\"Environment variable 'userPass' is not set!\");\r",
													"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");\r",
													"if (!pm.environment.get(\"adminName\")) throw new Error(\"Environment variable 'adminName' is not set!\");\r",
													"if (!pm.environment.get(\"adminPass\")) throw new Error(\"Environment variable 'adminPass' is not set!\");\r",
													"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
													"if (!pm.environment.get(\"userId\")) throw new Error(\"Environment variable 'userId' is not set!\");\r",
													"if (!pm.environment.get(\"adminId\")) throw new Error(\"Environment variable 'adminId' is not set!\");"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\" : \"empty request\",\r\n    \"password\" : \"empty request\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/auth/user/login",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "login admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 OK\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"\r",
													"pm.test(\"Have token\", function () {\r",
													"    pm.expect(data).to.have.property(\"token\");\r",
													"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
													"});\r",
													"\r",
													"pm.environment.set(\"adminToken\", data.token);"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\" : \"{{adminName}}\",\r\n    \"password\" : \"{{adminPass}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/auth/user/login",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"login"
											]
										}
									},
									"response": []
								},
								{
									"name": "no test check user exists and set userId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let user_name = pm.environment.get(\"userName\");\r",
													"\r",
													"try {\r",
													"    const data = pm.response.json();\r",
													"    const user = data.find(u => u.name === user_name);\r",
													"    \r",
													"    if (user) {\r",
													"        pm.environment.set(\"userId\", user.id);\r",
													"        console.log(\"User found and ID set:\", user.id);\r",
													"    } else {\r",
													"        console.log(\"User not found:\", user_name);\r",
													"    }\r",
													"} catch (e) {\r",
													"    console.log(\"Error parsing response or setting variable:\", e);\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (!pm.environment.get(\"adminToken\")) {\r",
													"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/auth/user/r_a/all",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"r_a",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "admin delete user if exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (!pm.environment.get(\"userId\")) {\r",
													"    throw new Error(\"Environment variable 'userId' is not set!\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:8080/auth/user/r_a/delete/{{userId}}",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"r_a",
												"delete",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "register user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"201 CREATED\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const data = pm.response.json();\r",
													"\r",
													"pm.test(\"Have token\", function () {\r",
													"    pm.expect(data).to.have.property(\"token\");\r",
													"    pm.expect(data.token, \"Token is empty\").to.be.a(\"string\").and.not.empty;\r",
													"});\r",
													"\r",
													"pm.environment.set(\"userToken\", data.token);"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\" : \"{{userName}}\",\r\n    \"password\" : \"{{userPass}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "localhost:8080/auth/user/register",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"register"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "2) test end points",
							"item": [
								{
									"name": "try open end point",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
													"\r",
													"pm.test(\"Response is an array\", () => pm.expect(Array.isArray(pm.response.json())).true);"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/lib/book/all",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"lib",
												"book",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "try user end point (../r_u/..)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (!pm.environment.get(\"userToken\")) throw new Error(\"Environment variable 'userToken' is not set!\");"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 OK\", () => pm.response.to.have.status(200));\r",
													"\r",
													"const data = pm.response.json();\r",
													"\r",
													"pm.test(\"Check UserDTO\", () => {\r",
													"    pm.expect(data, \"no id\").property(\"id\");\r",
													"    pm.expect(data.id, \"id is not a number\").a(\"number\");\r",
													"\r",
													"    pm.expect(data, \"no balanceUSD\").property(\"balanceUSD\");\r",
													"    pm.expect(data.balanceUSD, \"balanceUSD is not a number\").a(\"number\");\r",
													"    pm.expect(data.balanceUSD, \"balanceUSD != 0\").equal(0);\r",
													"});\r",
													"\r",
													"pm.environment.set(\"userId\", data.id);\r",
													"pm.environment.set(\"userBalance\", data.balanceUSD);"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/user/account/r_u/balance",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"user",
												"account",
												"r_u",
												"balance"
											]
										}
									},
									"response": []
								},
								{
									"name": "try admin end pont (../r_a/..)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"403 FORBIDDEN\", () => pm.response.to.have.status(403));\r",
													"\r",
													"pm.test(\"Response has expected Forbidden structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
													"    pm.expect(jsonData).to.have.property(\"status\", 403);\r",
													"    pm.expect(jsonData).to.have.property(\"error\", \"Forbidden\");\r",
													"    pm.expect(jsonData).to.have.property(\"path\", \"/auth/user/r_a/all\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/auth/user/r_a/all",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"r_a",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "try service integration end point (../s-i/..) Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (!pm.environment.get(\"adminToken\")) throw new Error(\"Environment variable 'adminToken' is not set!\");"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"403 FORBIDDEN\", () => pm.response.to.have.status(403));\r",
													"\r",
													"pm.test(\"Response has expected Forbidden structure\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.have.property(\"timestamp\");\r",
													"    pm.expect(jsonData).to.have.property(\"status\", 403);\r",
													"    pm.expect(jsonData).to.have.property(\"error\", \"Forbidden\");\r",
													"    pm.expect(jsonData).to.have.property(\"path\", \"/user/account/s-i/0\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/user/account/s-i/0",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"user",
												"account",
												"s-i",
												"0"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "3) clean up",
							"item": [
								{
									"name": "admin check user exists and set userId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 OK\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"let user_name = pm.environment.get(\"userName\");\r",
													"\r",
													"pm.test(\"Expect user with name: \" + user_name, function () {\r",
													"    const data = pm.response.json();\r",
													"    const user = data.find(u => u.name === user_name);\r",
													"    pm.expect(user, user_name + \" not found\").to.not.be.undefined;\r",
													"    \r",
													"    pm.environment.set(\"userId\", user.id);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (!pm.environment.get(\"adminToken\")) {\r",
													"    throw new Error(\"Environment variable 'adminToken' is not set!\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "localhost:8080/auth/user/r_a/all",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"r_a",
												"all"
											]
										}
									},
									"response": []
								},
								{
									"name": "admin delete user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"200 OK\", function() {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"if (!pm.environment.get(\"userId\")) {\r",
													"    throw new Error(\"Environment variable 'userId' is not set!\");\r",
													"}"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "localhost:8080/auth/user/r_a/delete/{{userId}}",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"auth",
												"user",
												"r_a",
												"delete",
												"{{userId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}